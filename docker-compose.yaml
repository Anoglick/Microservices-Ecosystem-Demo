services:
  cascade-service:
    build:
      context: ./Cascade
      dockerfile: Dockerfile
    environment:
      RMQ_URL: "amqp://guest:guest@rabbitMQ:5672/"
      QUEUE_NAME: "importer"
      RPC_NAME: "api_work"
      TIMEOUT: 10.0
    ports:
      - "8000:8000"
    depends_on:
      - rabbitMQ
    restart: unless-stopped
    networks:
      - app_network

  importer-service:
    build:
      context: ./Importer
      dockerfile: Dockerfile
    environment:
      RMQ_URL: "amqp://guest:guest@rabbitMQ:5672/"
      QUEUE_NAME: "importer"
      CASCADE_URL: "http://cascade-service:8000/v1/create"
    depends_on:
      - rabbitMQ
    restart: unless-stopped
    networks:
      - app_network

  microservice:
    build:
      context: ./Microservice
      dockerfile: Dockerfile
    environment:
      DB_HOST: "Database"
      DB_PORT: 5432
      DB_USER: "postgres"
      DB_NAME: "postgres"
      DB_PASS: 111
      HOST: "Cache"
      PORT: 6379
      DB: 1
      TTL: 10.0
    ports:
      - "8002:8002"
    depends_on:
      - database
      - cache
    restart: unless-stopped
    networks:
      - app_network

  discovery-service:
    build:
      context: ./Discovery
      dockerfile: Dockerfile
    environment:
      RMQ_PRODUCERS_URL: "amqp://guest:guest@rabbitMQ:5672/"
      RMQ_CONSUMERS_URL: "amqp://guest:guest@rabbitMQ:5672/"
      CONSUMERS_QUEUE_NAMES: "api_work, discovery"
      PRODUCERS_CACHE_QUEUE: "cache"
      PRODUCERS_DATABASE_QUEUE: "database"
    depends_on:
      - rabbitMQ
    restart: unless-stopped
    networks:
      - app_network

  database-service:
    build:
      context: ./Database
      dockerfile: Dockerfile
    environment:
      DB_HOST: "Database"
      DB_PORT: 5432
      DB_USER: "postgres"
      DB_NAME: "postgres"
      DB_PASS: 111
      RMQ_PRODUCERS_URL: "amqp://guest:guest@rabbitMQ:5672/"
      RMQ_CONSUMERS_URL: "amqp://guest:guest@rabbitMQ:5672/"
      CONSUMERS_QUEUE_NAME: "database"
      PRODUCERS_CACHE_QUEUE: "cache"
      PRODUCERS_DATABASE_QUEUE: "discovery"
    depends_on:
      - rabbitMQ
      - database
    restart: unless-stopped
    networks:
      - app_network

  cache-service:
    build:
      context: ./Cache
      dockerfile: Dockerfile
    environment:
      RMQ_PRODUCERS_URL: "amqp://guest:guest@rabbitMQ:5672/"
      RMQ_CONSUMERS_URL: "amqp://guest:guest@rabbitMQ:5672/"
      CONSUMERS_QUEUE_NAME: "cache"
      PRODUCERS_CACHE_QUEUE: "discovery"
      PRODUCERS_DATABASE_QUEUE: "database"
      HOST: "Cache"
      PORT: 6379
      DB: 1
      TTL: 10.0
    depends_on:
      - rabbitMQ
      - cache
    restart: unless-stopped
    networks:
      - app_network

  database:
    image: postgres:latest
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: 111
      POSTGRES_DB: "postgres"
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    restart: always
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  cache:
    image: redis:latest
    command: ["redis-server", "--maxmemory", "200mb", "--maxmemory-policy", "noeviction"]
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data
    restart: always
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  rabbitMQ:
    image: rabbitmq:3.12-management
    ports:
      - 5672:5672     # основной порт для клиентов
      - 15672:15672   # web-интерфейс (http://localhost:15672, login: guest/guest)
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: always
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics -q ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db-data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  app_network:
    driver: bridge
